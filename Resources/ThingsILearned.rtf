{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Consolas-Bold;\f2\fnil\fcharset0 Consolas;
\f3\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red37\green127\blue159;\red0\green0\blue120;\red38\green38\blue38;
\red245\green245\blue245;}
\margl1440\margr1440\vieww12600\viewh7800\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 \

\b\fs28 About: Installing Xerces Library, and compiling the parser sample code.\
10/10/2012
\b0\fs24 \
\

\b 1. When the error "
\f1\fs28 \cf2 Undefined\cf0  symbols \cf3 for\cf0  architecture x86_64
\f0\fs24 " from object file (temp.o for example) pops up, 
\b0 \
	it's likely because, after the compiler successfully recognizes all the symbol declarations from header files, it still does not understand the actual 
\b definition 
\b0 of the symbols -- usually defined in .cpp file. In such case, when we compile the code, we need to put the linker against the part of the library that contains the definitions of the file (which can be found in .dylib file as well).\
	In Makefile, we have -L option (linker). In our case, we do: -L./../include/xerces/lib -lxerces-c\
	The -I (big i) option is used to included header file in the lib. We use: -I./../include/xerces/include\
\

\b 2. When installing the C++ Xercess library, we need to configure the system regarding how we will build the library.\
Path to install the library.
\b0 \
	Architecture we will use: either i386 or x86_64. The native architecture of my macbook is 64 bit, but the default architecture used in mac turns out to be i386 (which is checked by "arch" command -- I guess some components of the mac still need i386 support). So we need to configure the "arch" before building.\
	In short, our configure command is: \
\
		./configure --prefix=/Users/Papoj/Hua_Columbia/2012/1-Fall/Classes/W4901_Research_Changxi/VTS_Repo/VTS/include/xerces CC="gcc -arch x86_64" CXX="g++ -arch x86_64"\
	\
	The configure will print out a lot of stuff, including the type of architecture detected (will be shown as i386-apple-darwin12.2.0), but I wouldn't worry too much about it since it will be overridden by the flag we just give during the actual compile time.\
\

\b 3. Don't compile with .h or .hpp files included!!!
\b0 \
	For simple case, instead of \
		g++ -o myProgram *.hpp *cpp\
	Do:\
		g++ -o myProgram *.cpp\
	Otherwise the weird error like "
\f2\fs28 warning: in myHeader.hpp, file was built \cf3 for\cf0  unsupported file format which is not the architecture being linked (x86_64)
\f0\fs24 ". Compile the cpp files only.\
\

\b 4. Dependencies in Makefile:
\b0 \
	See Makefile in DOMPrint. There are two versions I created. Crappy one--slow and inefficient, and the better one that makes use of dependencies.\
	Syntax:\
\
		commandName.o: <list of related files for compiling this task>\
			<compile command> <only file that will be compiled to object file> <flags>\
\

\b 5. To switch quickly between .cpp and .h files in Xcode 4.
\b0 \
	
\f3\fs22 \cf4 \cb5 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 Ctrl
\fs28 \cf0 \cb1 \shad0 +
\fs22 \cf4 \cb5 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 Cmd
\fs28 \cf0 \cb1 \shad0 +
\fs22 \cf4 \cb5 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 Up
\fs28 \cf0 \cb1 \shad0  or 
\fs22 \cf4 \cb5 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 Down
\f0\fs24 \cf0 \cb1 \shad0 \
}